// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/integr8ly/cloud-resource-operator/pkg/providers"
	"sync"
)

var (
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping sync.RWMutex
	lockConfigManagerMockReadSMTPCredentialSetStrategy     sync.RWMutex
	lockConfigManagerMockReadStorageStrategy               sync.RWMutex
)

// Ensure, that ConfigManagerMock does implement ConfigManager.
// If this is not the case, regenerate this file with moq.
var _ ConfigManager = &ConfigManagerMock{}

// ConfigManagerMock is a mock implementation of ConfigManager.
//
//     func TestSomethingThatUsesConfigManager(t *testing.T) {
//
//         // make and configure a mocked ConfigManager
//         mockedConfigManager := &ConfigManagerMock{
//             GetDefaultRegionSMTPServerMappingFunc: func() map[string]string {
// 	               panic("mock out the GetDefaultRegionSMTPServerMapping method")
//             },
//             ReadSMTPCredentialSetStrategyFunc: func(ctx context.Context, tier string) (*StrategyConfig, error) {
// 	               panic("mock out the ReadSMTPCredentialSetStrategy method")
//             },
//             ReadStorageStrategyFunc: func(ctx context.Context, rt providers.ResourceType, tier string) (*StrategyConfig, error) {
// 	               panic("mock out the ReadStorageStrategy method")
//             },
//         }
//
//         // use mockedConfigManager in code that requires ConfigManager
//         // and then make assertions.
//
//     }
type ConfigManagerMock struct {
	// GetDefaultRegionSMTPServerMappingFunc mocks the GetDefaultRegionSMTPServerMapping method.
	GetDefaultRegionSMTPServerMappingFunc func() map[string]string

	// ReadSMTPCredentialSetStrategyFunc mocks the ReadSMTPCredentialSetStrategy method.
	ReadSMTPCredentialSetStrategyFunc func(ctx context.Context, tier string) (*StrategyConfig, error)

	// ReadStorageStrategyFunc mocks the ReadStorageStrategy method.
	ReadStorageStrategyFunc func(ctx context.Context, rt providers.ResourceType, tier string) (*StrategyConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDefaultRegionSMTPServerMapping holds details about calls to the GetDefaultRegionSMTPServerMapping method.
		GetDefaultRegionSMTPServerMapping []struct {
		}
		// ReadSMTPCredentialSetStrategy holds details about calls to the ReadSMTPCredentialSetStrategy method.
		ReadSMTPCredentialSetStrategy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tier is the tier argument value.
			Tier string
		}
		// ReadStorageStrategy holds details about calls to the ReadStorageStrategy method.
		ReadStorageStrategy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Rt is the rt argument value.
			Rt providers.ResourceType
			// Tier is the tier argument value.
			Tier string
		}
	}
}

// GetDefaultRegionSMTPServerMapping calls GetDefaultRegionSMTPServerMappingFunc.
func (mock *ConfigManagerMock) GetDefaultRegionSMTPServerMapping() map[string]string {
	if mock.GetDefaultRegionSMTPServerMappingFunc == nil {
		panic("ConfigManagerMock.GetDefaultRegionSMTPServerMappingFunc: method is nil but ConfigManager.GetDefaultRegionSMTPServerMapping was just called")
	}
	callInfo := struct {
	}{}
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.Lock()
	mock.calls.GetDefaultRegionSMTPServerMapping = append(mock.calls.GetDefaultRegionSMTPServerMapping, callInfo)
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.Unlock()
	return mock.GetDefaultRegionSMTPServerMappingFunc()
}

// GetDefaultRegionSMTPServerMappingCalls gets all the calls that were made to GetDefaultRegionSMTPServerMapping.
// Check the length with:
//     len(mockedConfigManager.GetDefaultRegionSMTPServerMappingCalls())
func (mock *ConfigManagerMock) GetDefaultRegionSMTPServerMappingCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.RLock()
	calls = mock.calls.GetDefaultRegionSMTPServerMapping
	lockConfigManagerMockGetDefaultRegionSMTPServerMapping.RUnlock()
	return calls
}

// ReadSMTPCredentialSetStrategy calls ReadSMTPCredentialSetStrategyFunc.
func (mock *ConfigManagerMock) ReadSMTPCredentialSetStrategy(ctx context.Context, tier string) (*StrategyConfig, error) {
	if mock.ReadSMTPCredentialSetStrategyFunc == nil {
		panic("ConfigManagerMock.ReadSMTPCredentialSetStrategyFunc: method is nil but ConfigManager.ReadSMTPCredentialSetStrategy was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Tier string
	}{
		Ctx:  ctx,
		Tier: tier,
	}
	lockConfigManagerMockReadSMTPCredentialSetStrategy.Lock()
	mock.calls.ReadSMTPCredentialSetStrategy = append(mock.calls.ReadSMTPCredentialSetStrategy, callInfo)
	lockConfigManagerMockReadSMTPCredentialSetStrategy.Unlock()
	return mock.ReadSMTPCredentialSetStrategyFunc(ctx, tier)
}

// ReadSMTPCredentialSetStrategyCalls gets all the calls that were made to ReadSMTPCredentialSetStrategy.
// Check the length with:
//     len(mockedConfigManager.ReadSMTPCredentialSetStrategyCalls())
func (mock *ConfigManagerMock) ReadSMTPCredentialSetStrategyCalls() []struct {
	Ctx  context.Context
	Tier string
} {
	var calls []struct {
		Ctx  context.Context
		Tier string
	}
	lockConfigManagerMockReadSMTPCredentialSetStrategy.RLock()
	calls = mock.calls.ReadSMTPCredentialSetStrategy
	lockConfigManagerMockReadSMTPCredentialSetStrategy.RUnlock()
	return calls
}

// ReadStorageStrategy calls ReadStorageStrategyFunc.
func (mock *ConfigManagerMock) ReadStorageStrategy(ctx context.Context, rt providers.ResourceType, tier string) (*StrategyConfig, error) {
	if mock.ReadStorageStrategyFunc == nil {
		panic("ConfigManagerMock.ReadStorageStrategyFunc: method is nil but ConfigManager.ReadStorageStrategy was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Rt   providers.ResourceType
		Tier string
	}{
		Ctx:  ctx,
		Rt:   rt,
		Tier: tier,
	}
	lockConfigManagerMockReadStorageStrategy.Lock()
	mock.calls.ReadStorageStrategy = append(mock.calls.ReadStorageStrategy, callInfo)
	lockConfigManagerMockReadStorageStrategy.Unlock()
	return mock.ReadStorageStrategyFunc(ctx, rt, tier)
}

// ReadStorageStrategyCalls gets all the calls that were made to ReadStorageStrategy.
// Check the length with:
//     len(mockedConfigManager.ReadStorageStrategyCalls())
func (mock *ConfigManagerMock) ReadStorageStrategyCalls() []struct {
	Ctx  context.Context
	Rt   providers.ResourceType
	Tier string
} {
	var calls []struct {
		Ctx  context.Context
		Rt   providers.ResourceType
		Tier string
	}
	lockConfigManagerMockReadStorageStrategy.RLock()
	calls = mock.calls.ReadStorageStrategy
	lockConfigManagerMockReadStorageStrategy.RUnlock()
	return calls
}
